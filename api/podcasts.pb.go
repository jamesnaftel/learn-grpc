// Code generated by protoc-gen-go. DO NOT EDIT.
// source: podcasts.proto

package podcasts

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc1ea1b9808ff0a, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Podcast struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Author               string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Length               int32    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Podcast) Reset()         { *m = Podcast{} }
func (m *Podcast) String() string { return proto.CompactTextString(m) }
func (*Podcast) ProtoMessage()    {}
func (*Podcast) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc1ea1b9808ff0a, []int{1}
}

func (m *Podcast) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Podcast.Unmarshal(m, b)
}
func (m *Podcast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Podcast.Marshal(b, m, deterministic)
}
func (m *Podcast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Podcast.Merge(m, src)
}
func (m *Podcast) XXX_Size() int {
	return xxx_messageInfo_Podcast.Size(m)
}
func (m *Podcast) XXX_DiscardUnknown() {
	xxx_messageInfo_Podcast.DiscardUnknown(m)
}

var xxx_messageInfo_Podcast proto.InternalMessageInfo

func (m *Podcast) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Podcast) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Podcast) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "podcasts.Empty")
	proto.RegisterType((*Podcast)(nil), "podcasts.Podcast")
}

func init() { proto.RegisterFile("podcasts.proto", fileDescriptor_dbc1ea1b9808ff0a) }

var fileDescriptor_dbc1ea1b9808ff0a = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xc8, 0x4f, 0x49,
	0x4e, 0x2c, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xd8,
	0xb9, 0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x7c, 0xb9, 0xd8, 0x03, 0x20, 0x82, 0x42, 0x42,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90,
	0x18, 0x17, 0x5b, 0x62, 0x69, 0x49, 0x46, 0x7e, 0x91, 0x04, 0x13, 0x58, 0x14, 0xca, 0x03, 0x89,
	0xe7, 0xa4, 0xe6, 0xa5, 0x97, 0x64, 0x48, 0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79, 0x46,
	0xb6, 0x5c, 0x1c, 0x50, 0xe3, 0x8a, 0x85, 0x0c, 0xb9, 0xb8, 0xdd, 0x53, 0x4b, 0xe0, 0x5c, 0x7e,
	0x3d, 0xb8, 0x6b, 0xc0, 0x56, 0x4b, 0x09, 0x22, 0x04, 0xa0, 0x8a, 0x92, 0xd8, 0xc0, 0xee, 0x34,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x46, 0xc2, 0xb6, 0xb9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PodcastsClient is the client API for Podcasts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PodcastsClient interface {
	GetPodcasts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Podcast, error)
}

type podcastsClient struct {
	cc *grpc.ClientConn
}

func NewPodcastsClient(cc *grpc.ClientConn) PodcastsClient {
	return &podcastsClient{cc}
}

func (c *podcastsClient) GetPodcasts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Podcast, error) {
	out := new(Podcast)
	err := c.cc.Invoke(ctx, "/podcasts.Podcasts/GetPodcasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodcastsServer is the server API for Podcasts service.
type PodcastsServer interface {
	GetPodcasts(context.Context, *Empty) (*Podcast, error)
}

// UnimplementedPodcastsServer can be embedded to have forward compatible implementations.
type UnimplementedPodcastsServer struct {
}

func (*UnimplementedPodcastsServer) GetPodcasts(ctx context.Context, req *Empty) (*Podcast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodcasts not implemented")
}

func RegisterPodcastsServer(s *grpc.Server, srv PodcastsServer) {
	s.RegisterService(&_Podcasts_serviceDesc, srv)
}

func _Podcasts_GetPodcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).GetPodcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podcasts.Podcasts/GetPodcasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).GetPodcasts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Podcasts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "podcasts.Podcasts",
	HandlerType: (*PodcastsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodcasts",
			Handler:    _Podcasts_GetPodcasts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podcasts.proto",
}
