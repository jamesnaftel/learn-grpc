// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Podcast
	ByNameRequest
	Empty
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Podcast struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Length int32  `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (m *Podcast) Reset()                    { *m = Podcast{} }
func (m *Podcast) String() string            { return proto.CompactTextString(m) }
func (*Podcast) ProtoMessage()               {}
func (*Podcast) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Podcast) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Podcast) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Podcast) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type ByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ByNameRequest) Reset()                    { *m = ByNameRequest{} }
func (m *ByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*ByNameRequest) ProtoMessage()               {}
func (*ByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Podcast)(nil), "api.Podcast")
	proto.RegisterType((*ByNameRequest)(nil), "api.ByNameRequest")
	proto.RegisterType((*Empty)(nil), "api.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Podcasts service

type PodcastsClient interface {
	GetByName(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*Podcast, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Podcasts_ListClient, error)
	Add(ctx context.Context, in *Podcast, opts ...grpc.CallOption) (*Podcast, error)
}

type podcastsClient struct {
	cc *grpc.ClientConn
}

func NewPodcastsClient(cc *grpc.ClientConn) PodcastsClient {
	return &podcastsClient{cc}
}

func (c *podcastsClient) GetByName(ctx context.Context, in *ByNameRequest, opts ...grpc.CallOption) (*Podcast, error) {
	out := new(Podcast)
	err := grpc.Invoke(ctx, "/api.Podcasts/GetByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcastsClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Podcasts_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Podcasts_serviceDesc.Streams[0], c.cc, "/api.Podcasts/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &podcastsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Podcasts_ListClient interface {
	Recv() (*Podcast, error)
	grpc.ClientStream
}

type podcastsListClient struct {
	grpc.ClientStream
}

func (x *podcastsListClient) Recv() (*Podcast, error) {
	m := new(Podcast)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *podcastsClient) Add(ctx context.Context, in *Podcast, opts ...grpc.CallOption) (*Podcast, error) {
	out := new(Podcast)
	err := grpc.Invoke(ctx, "/api.Podcasts/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Podcasts service

type PodcastsServer interface {
	GetByName(context.Context, *ByNameRequest) (*Podcast, error)
	List(*Empty, Podcasts_ListServer) error
	Add(context.Context, *Podcast) (*Podcast, error)
}

func RegisterPodcastsServer(s *grpc.Server, srv PodcastsServer) {
	s.RegisterService(&_Podcasts_serviceDesc, srv)
}

func _Podcasts_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Podcasts/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).GetByName(ctx, req.(*ByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Podcasts_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodcastsServer).List(m, &podcastsListServer{stream})
}

type Podcasts_ListServer interface {
	Send(*Podcast) error
	grpc.ServerStream
}

type podcastsListServer struct {
	grpc.ServerStream
}

func (x *podcastsListServer) Send(m *Podcast) error {
	return x.ServerStream.SendMsg(m)
}

func _Podcasts_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Podcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcastsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Podcasts/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcastsServer).Add(ctx, req.(*Podcast))
	}
	return interceptor(ctx, in, info, handler)
}

var _Podcasts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Podcasts",
	HandlerType: (*PodcastsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByName",
			Handler:    _Podcasts_GetByName_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Podcasts_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Podcasts_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xf2, 0xe5, 0x62, 0x0f, 0xc8,
	0x4f, 0x49, 0x4e, 0x2c, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0xc4, 0xb8, 0xd8, 0x12, 0x4b, 0x4b, 0x32, 0xf2, 0x8b,
	0x24, 0x98, 0xc0, 0xa2, 0x50, 0x1e, 0x48, 0x3c, 0x27, 0x35, 0x2f, 0xbd, 0x24, 0x43, 0x82, 0x59,
	0x81, 0x51, 0x83, 0x35, 0x08, 0xca, 0x53, 0x52, 0xe6, 0xe2, 0x75, 0xaa, 0xf4, 0x4b, 0xcc, 0x4d,
	0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0xc5, 0x6e, 0xa8, 0x12, 0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49,
	0xa5, 0x51, 0x03, 0x23, 0x17, 0x07, 0xd4, 0xf6, 0x62, 0x21, 0x5d, 0x2e, 0x4e, 0xf7, 0xd4, 0x12,
	0x88, 0x6e, 0x21, 0x21, 0x3d, 0x90, 0x3b, 0x51, 0x8c, 0x92, 0xe2, 0x01, 0x8b, 0xc1, 0x5c, 0xab,
	0xc4, 0xc5, 0xe2, 0x93, 0x59, 0x5c, 0x22, 0xc4, 0x05, 0x16, 0x05, 0x9b, 0x87, 0xaa, 0xc2, 0x80,
	0x51, 0x48, 0x91, 0x8b, 0xd9, 0x31, 0x25, 0x45, 0x08, 0x45, 0x18, 0x55, 0x51, 0x12, 0x1b, 0x38,
	0x2c, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x47, 0x36, 0x43, 0x18, 0x01, 0x00, 0x00,
}
